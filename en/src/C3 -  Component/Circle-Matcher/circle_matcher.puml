@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml

LAYOUT_WITH_LEGEND() 
LAYOUT_LEFT_RIGHT()

Container(ui, "CharlesCD-UI", "ReacjJS, Typescript", "Web Application: Product's Interface")
Container(circle_matcher_database, "Circle Matcher Database", "Redis", "Stores the circle's segmentation data by workspace.")
Container(moove, "CharlesCD-Moove", "Kotlin, SpringBoot", "API Application: Process and stores in the database the information of users, applications, and settings in general. It orchestrates the requests to other applications.")
System_Ext(integrated_api, "Integrated API", "Any")


Container_Boundary(charlescd_circle_matcher, "CharlesCD Circle Matcher"){
   
    Component(circle_matcher_repository, "Circle Matcher Repository", "Spring Repository", "Access to the database. It has the KeyMetaData and Segmentation repositories.")

    Component(application_ready_listener, "Application Ready Listener", "ApplicationListener<ApplicationReadyEvent>", "Executes when the application starts up to purge data from Redis. It is functional only in case of migration to maintain backwards compatibility with circle matchers that already had data.")

    Component(segmentation_resource, "Segmentation Resource", "Spring Controller", "Allows manual and csv segmentation creation/deletion/update.")
    Component(segmentation_service, "Segmentation Service", "Spring Service", "Saves, deletes, and updates the segmentations in the database.")
    
    
    Component(identification_resource, "Identification Resource", "Spring Controller", "Allows identification of which circles matches the sent segmentation characteristics.")
    Component(identification_service, "Identification Service", "Spring Service", "It searches the database and compares them with the data entered in the request to return the corresponding circles.")
    Component(script_manager_service, "Script Manager Service", " Spring Service/Polyglot Engine GraalVM", "Uses the javascript motor to check compatibility between different data (request x redis).")
    Component(js_functions, "JS Functions", " Arquivos JS", "Provides the JS functions to validate data (getPath, toNumber, toStr).")
    
    
    Rel(segmentation_resource, segmentation_service, "Use")
    Rel(segmentation_service, circle_matcher_repository, "Use")
    Rel(identification_resource, identification_service, "Use")
    Rel(identification_service, circle_matcher_repository, "Use")
    Rel(identification_service, script_manager_service, "Use")
    Rel(script_manager_service, js_functions, "Use")
    Rel(application_ready_listener, circle_matcher_repository, "Use")
    Rel(circle_matcher_repository, circle_matcher_database, "Use")
   
}

Rel(moove, segmentation_resource, "Makes the request", "JSON/HTTPS")
Rel(moove, identification_resource, "Makes the request", "JSON/HTTPS")
Rel(ui, moove, "Makes the request", "JSON/HTTPS")
Rel(integrated_api, identification_resource, "Makes the request", "JSON/HTTPS")


@enduml
