@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Container.puml

LAYOUT_WITH_LEGEND()
LAYOUT_LEFT_RIGHT()

Person(user, "Developer/QA/PM/Manager/Supervisor/Etc", "Anyone who has an application with deployments managed by CharlesCD.")

Container(moove_database, "Moove Database", "Postgres", "Stores information about Users, User Groups, Systemic Token, Permissions, Roles, Workspaces, Components, Modules, Builds, Deployments, Circles, Metrics Settings and Deploy Environment Settings.")
Container(compass_database, "Compass Database", "Postgres", "Stores metrics data.")
Container(circle_matcher_database, "Circle Matcher Database", "Redis", "Stores segmentation data from the circles by workspace")
Container(villager_database, "Villager Database", "Postgres", "Stores the users' registry configuration data.")
Container(hermes_database, "Hermes Database", "Postgres", "Stores subscription, messages history, and sending history.")
Container(butler_database, "Butler Database", "Postgres", "Stores deployments data and applications (Kubernetes manifests).")
Container(hermes_message_broker, "Hermes Message Broker", "RabbitMQ", "Manages messages flow.")

	
System_Ext(keycloack, "Keycloack", "IDM: Manages and authenticates users.")
System_Ext(metrics_provider, "Metrics Provider (Prometheus or Google Analytics)", "Stores and makes application metrics available .")
System_Ext(github_api, "GitHub API", "Access charts information.")
System_Ext(registry_api, "Registry API (DockerHub, AWS ECR, Azure ECR, GCR or Harbor)", "Stores and makes images available.")
System_Ext(webhook_api, "Webhook API", "Receives deployment event notifications configured by the user.")
System_Ext(kubernetes_api, "Kubernates API", "Manages the cluster's resources in the application.")
Container_Ext(envoy, "Envoy", "Proxy")

Container_Boundary(charlescd_system2, "CharlesCD System"){
   
    Container(ui, "CharlesCD-UI", "ReacjJS, Typescript", "Web Application: Product's interface")
    Container(gate, "CharlesCD-Gate", "Golang, Casbin", "API Application: Manages application tokens storing them in the database and authorizes the system's requests via token or authorization header.")
    Container(compass, "CharlesCD-Compass", "Golang, Casbin", "API Application: Process metrics by the user's registered provider and provides them via JSON/HTTPS API.")
    Container(moove, "CharlesCD-Moove", "Kotlin, SpringBoot", "API Application: Process and stores in the database the user's information, applications, and general configuration. It orchestrates the requests to other applications.")
    Container(circle_matcher, "CharlesCD-Circle-Matcher", "Java 11, SpringBoot, GraalVM, Javascript", "API Application: Manages (identify/store) the segmentation (circle) to which the request's user belongs to.")
    Container(villager, "CharlesCD-Villager", "Java 8, Quarkus", "API Application: Validates image's tags informed to perform a deployment. It communicates with the user's Registry via JSON/HTTPS API.")
    Container(hermes, "CharlesCD-Hermes", "Golang", "API Application: Manages webhook subscriptions, receives deployments events notifications, sends notifications of subscribed events.")
    Container(butler, "CharlesCD-Butler", "Node, NestJS", "API Application: It communicates with Kubernetes informing cluster states so that the Operator can carry out the reconciliation process according to the information passed and perform the necessary implementations. It uses the Istio feature to allow different versions based on a custom header/cookie.")

   
    Rel(ui, moove, "Makes the request", "JSON/HTTPS")
    Rel(ui, compass, "Makes the request", "JSON/HTTPS")

    Rel(moove, circle_matcher, "Makes the request", "JSON/HTTPS")
    Rel(moove, villager, "Makes the request", "JSON/HTTPS")
    Rel(moove, hermes, "Makes the request", "JSON/HTTPS")
    Rel(moove, butler, "Makes the request", "JSON/HTTPS")
    Rel(moove, moove_database, "Reads and writes in", "JDBC")
    Rel(moove, keycloack, "Makes the request", "JSON/HTTPS")
    Rel(moove, github_api, "Makes the request", "JSON/HTTPS")   
    
    Rel(gate, moove_database, "Reads and writes in", "JDBC")

    Rel(compass, compass_database, "Reads and writes in", "JDBC")
    Rel(compass, moove_database, "Reads and writes in", "JDBC")
    Rel(compass, metrics_provider, "Makes the request", "JSON/HTTPS")

        
    Rel(circle_matcher, circle_matcher_database, "Reads and writes in", "JDBC")

    Rel(villager, villager_database, "Reads and writes in", "JDBC")
    Rel(villager, registry_api, "Makes the request", "JSON/HTTPS")
    
    Rel(hermes, hermes_database, "Reads and writes in", "JDBC")
    Rel(hermes, hermes_message_broker, "Publishes and consumes", "AMQP")
    Rel(hermes, webhook_api, "Makes the request", "JSON/HTTPS")

    Rel(butler, butler_database, "Reads and writes in", "JDBC")
    Rel(butler, kubernetes_api, "Makes the request", "JSON/HTTPS")
    Rel(butler, github_api, "Makes the request", "JSON/HTTPS")
   
}


Rel(user, ui, "Access to manage workspaces, applications, configurations, users, metrics and webhooks.")
Rel(envoy, ui, "Intercept requests", "HTTP Filter")
Rel(envoy, gate, "Makes the request", "JSON/HTTPS")

@enduml
