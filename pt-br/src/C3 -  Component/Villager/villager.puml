@startuml c2
!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml

LAYOUT_WITH_LEGEND()
LAYOUT_LEFT_RIGHT()

Container(ui, "CharlesCD-UI", "ReacjJS, Typescript", "Web Application: Interface do produto")
Container(moove, "CharlesCD-Moove", "Kotlin, SpringBoot", "API Application: Processa e armazena no banco de dados as informações dos usuários, aplicações e configurações em geral. Orquestra as requisições para as outras aplicações.")
Container(registry_api, "Registry API", "DockerHub, AWS ECR, Azure ECR, GCR, Harbor", "Armazena e disponibiliza as imagens.")
Container(villager_database, "Villager Database", "Postgres", "Armazena os dados de configuração do registry do usuário.")

Container_Boundary(charlescd_villager, "CharlesCD Villager"){
   
    Component(docker_request_handler, "Docker Request Handler", "Request Handler", "Realiza a criação/deleção/atualização/teste de conexão de uma configuração de registry.")
    Component(docker_registry_resource, "Docker Registry Resource", "Quarkus Resource", "Permite a criação/deleção/atualização/teste de conexão de uma configuração de registry.")
    Component(docker_registry_interactor, "Docker Registry Interactor", "Quarkus UseCase/Bean", "Realiza a criação/deleção/atualização/teste de conexão de uma configuração de registry")

    Component(docker_registry_client, "Docker Registry Client", "Client API", "Acesso a API do Registry.")
    Component(villager_repository, "Villager Repository", "Database Repository", "Acesso ao banco de dados. Engloba os repositórios DockerRegistryConfiguration, Module, Component, Build.")

    Component(build_resource, "<DEPRECATED> Build Resource", "Quarkus Resource", "Permite a criação de builds (board de hipóteses)")
    
    Rel(docker_request_handler, docker_registry_resource, "Usa")
    Rel(docker_registry_resource, docker_registry_interactor, "Usa")
    Rel(docker_registry_interactor, docker_registry_client, "Usa")
    Rel(docker_registry_interactor, villager_repository, "Usa")
    Rel(docker_registry_client, registry_api, "Faz a requisição via HTTPS/JSON") 
    Rel(villager_repository, villager_database, "Lê e escreve em (JPA)")

    Rel(build_resource, villager_repository, "Usa")
   
}

Rel(moove, docker_registry_resource, "Faz requisição", "JSON/HTTPS")
Rel(ui, moove, "Faz a requisição", "JSON/HTTPS")
@enduml
